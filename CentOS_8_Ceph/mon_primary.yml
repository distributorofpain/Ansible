# This file sets up the primary monitor server, its primarily doing the time server bits now.
# Generate the SSH key set on the C&C ansible server, save it to reasonable path for ansible to use and adjust the /path/to/id_rsa.pub below
# make sure to create a monprimary section and place the primary mon there.
# Password for ceph_password is encrypted with "openssl passwd -6" command on CentOS 8 to use in this file.
# You might want to comment out the open vm tools below if you deploy monitors to physical machines.  ( also other tools you may not use )
# WARNING - Disables firewall and SELINUX below ( comment out or delete those sections if not desired )

---
- hosts: monprimary
  become: true
  serial: 1

  vars:
    # Define ceph user
    ceph_user_name: cephusr
    ceph_password: ''

  tasks:

    - name: Create ceph-ansible user with admin privledges
      user:
        name: "{{ ceph_user_name }}"
        shell: /bin/bash
        groups: wheel
        password: "{{ ceph_password }}"
        append: yes
        createhome: yes
        home: /home/{{ ceph_user_name }}

    - name: Add ceph user to sudoers
      lineinfile: dest=/etc/sudoers
                  regexp="{{ ceph_user_name }} ALL"
                  line="{{ ceph_user_name }} ALL=(ALL) NOPASSWD:ALL"
                  state=present

    - name: Add user {{ ceph_user_name }} to sudo
      lineinfile:
        path: /etc/sudoers.d/{{ ceph_user_name }}
        line: '{{ ceph_user_name }} ALL=(ALL) NOPASSWD:ALL'
        state: present
        mode: 0440
        create: yes
        validate: 'visudo -cf %s'

    - name: Set authorized key taken from file
      authorized_key:
        user: "{{ ceph_user_name }}"
        state: present
        key: "{{ lookup('file', '/path/to/id_rsa.pub') }}"
# Change this path to your deployment servers id_rsa.pub file

    - name: Upgrade all yum packages
      yum:
        name: "*"
        state: latest

    - name: Ensure Open VM Tools is install
      yum: name=open-vm-tools state=installed

    - name: Ensure chrony is installed ( new NTP Client )
      yum: name=chrony state=installed

    - name: Ensure tar is installed
      yum: name=tar state=installed

    - name: Ensure xz is installed
      yum: name=xz state=installed

    - name: Ensure unzip is installed
      yum: name=unzip state=installed

    - name: Ensure curl is installed
      yum: name=curl state=installed

    - name: Ensure ipset is installed
      yum: name=ipset state=installed

    - name: Ensure nano is installed
      yum: name=nano state=installed

    - name: Ensure net-tools is installed
      yum: name=net-tools state=installed

    - name: Ensure ftp is installed
      yum: name=ftp state=installed

    - name: Ensure wget is installed
      yum: name=wget state=installed

    - name: Ensure dig(bind-utils) is installed
      yum: name=bind-utils state=installed

    - name: enable service chronyd and ensure it is not masked
      systemd:
        name: chronyd
        enabled: yes
        masked: no

    - name: Make sure a chrony service is running
      systemd:
        state: started
        name: chronyd

    - name: Check to see if SELINUX is enforcing
      shell: cat /etc/selinux/config
      register: enforcing

    - name: Change SELINUX to permissive mode, required by ceph as it breaks things
      lineinfile: dest=/etc/selinux/config
                  regexp='^SELINUX=enforcing'
                  line='SELINUX=permissive'
      when: enforcing.stdout.find('SELINUX=enforcing') != -1

    - name: Set SELINUX to log only
      shell: setenforce 0
      when: enforcing.stdout.find('SELINUX=enforcing') != -1

    - name: Make sure a firewall service is stopped
      systemd:
        state: stopped
        name: firewalld

    - name: Disable firewall service
      systemd:
        name: firewalld
        enabled: no

    - name: Delete existing config file if present
      file:
        path: /home/cephusr/.ssh/config
        state: absent

    - name: Create SSH configuration file for ceph user
      lineinfile: dest=/home/cephusr/.ssh/config
                  regexp=''
                  line='StrictHostKeyChecking no\nLogLevel QUIET'
                  create=True

    - name: restart server
      shell: /bin/sleep 5 && /sbin/shutdown -r now "Reboot triggered by Ansible"
      async: 1
      poll: 0
      ignore_errors: true

    - name: waiting for the servers to come back
      wait_for:
        port: 22
        state: started
        host: '{{ ansible_ssh_host | default(inventory_hostname) }}'
        delay: 30
        timeout: 1200
        sleep: 10
      become: false
      connection: local